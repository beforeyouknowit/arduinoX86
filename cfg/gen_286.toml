[test_gen]

cpu_type = "intel80286"
# Execution mode - real, unreal, protected
cpu_mode = "real"
seed = 1234
termination_condition = "halt"
output_dir = "e:/test_output_286/"
address_mask = 0xFFFFFF # 24-bit address mask for 286
instruction_address_range = [0x1024, 0xFFFFFF] # Allowed instruction address range

extended_opcode = false # Use extended opcodes (0x0F)
opcode_range = [0x00, 0x00]
group_extension_range = [0, 7] # Range for group extensions
excluded_opcodes = [0xF1]

test_count = 1
append_file = true

segment_override_chance = 0.10 # Chance of segment override prefix (10%)
lock_chance = 0.025 # Chance of LOCK prefix (2.5%)

reg_zero_chance = 0.05 # Chance of zeroed register (5%)
reg_ff_chance = 0.05 # Chance of an all-bit-set register (5%)

mem_zero_chance = 0.05 # Chance of zeroed memory (5%)
mem_ff_chance = 0.05 # Chance of all-bit-set memory (5%)

extended_prefix = 0x0F

group_opcodes = [
    0x80, 0x81, 0x82, 0x83, # Group 1: ADD, OR, ADC, SBB, AND, SUB, XOR, CMP
    0xC0, 0xC1, # Group 2a: ROL, ROR, RCL, RCR, SHL, SHR, SAL, SAR
    0xD0, 0xD1, 0xD2, 0xD3, # Group 2b: ROL, ROR, RCL, RCR, SHL, SHR, SAL, SAR
    0xF6, 0xF7, # Group 3: MUL, IMUL, DIV, IDIV
    0xFE, 0xFF, # Group 4: INC, DEC, CALL, JMP, PUSH, POP
]

extended_group_opcodes = [
    0x00, # SLDT, STR, LLDT, LTR, VERR, VERW
    0x01, # SGDT, SIDT, LGDT, LIDT, SMSW, LMSW
]

# These opcodes are prefixes and should not be generated as standalone instructions.
prefixes = [
    0x0F, # Opcode extension
    0x26, 0x2E, 0x36, 0x3E, # Segment override prefixes
    0xF0, # Lock prefix
    0xF1, # Undocumented ICE prefix
    0xF2, 0xF3, # Repeat prefixes
]

segment_prefixes = [
    0x26, # ES
    0x2E, # CS
    0x36, # SS
    0x3E, # DS
]

# These opcodes will receive random REP prefixes.
rep_opcodes = [
    0xA4, # MOVSB
    0xA5, # MOVSW
    0xA6, # CMPSB
    0xA7, # CMPSW
    0xAA, # STOSB
    0xAB, # STOSW
    0xAC, # LODSB
    0xAD, # LODSW
    0xAE, # SCASB
    0xAF, # SCASW
]

# Disable segment override prefixes for instructions where they can't possibly have an effect.
disable_seg_overrides = [
    0x06, 0x07, 0x0E, 0x16, 0x17, 0x1E, 0x1F, # PUSH and POP (always stack segment)
    0x27, 0x2F, 0x37, 0x3F, # DAA, DAS, AAA, AAS
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, # INC and DEC
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, # PUSH and POP
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, # Jcc instructions
    0x8F, # POP instruction (always stack segment)
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, # Register XCHG
    0x98, 0x99, # CBW and CWD
    0x9B, # WAIT
    0x9C, 0x9D, # PUSHF and POPF (always stack segment)
    0x9E, 0x9F, # SAHF and LAHF
    0xA8, 0xA9, # Test imm8
    0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, # MOV imm8 to register
    0xC2, 0xC3, # RET imm16
    0xCA, 0xCB, # RETF imm16
    0xCC, 0xCD, 0xCE, 0xCF, # Interrupts
    0xD4, 0xD5, 0xD6, # AAM, AAD, SALC
    0xE4, 0xE5, 0xE6, 0xE7, # IN and OUT
    0xE8, 0xE9, # CALL rel
    0xEC, 0xED, 0xEE, 0xEF, # IN and OUT
    0xF5, # CMC
    0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, # CLC, STC, CLI, STI, CLD, STD
]

# Disable LOCK prefixes on instructions that can't access the bus
disable_lock_prefix = [
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, # INC and DEC
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, # Register XCHG
    0x9E, 0x9F, # SAHF and LAHF
    0xA8, 0xA9, # Test imm8
    0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, # MOV imm8 to register
    0xF5, # CMC
    0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, # CLC, STC, CLI, STI, CLD, STD
]

# Arduino control stuff

# Randomize memory after this many instructions have been generated.
# Memory is always randomized at the start of a test run.
randomize_mem_interval = 1000

[test_exec]
polling_sleep = 100 # Polling rate in milliseconds per poll